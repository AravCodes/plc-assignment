name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-smoke:
    runs-on: windows-latest

    env:
      DOTNET_VERSION: '8.0.x'
      NODE_VERSION: '18.x'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore & Build ProjectManagerAPI
        working-directory: project-manager/backend/ProjectManagerAPI
        run: |
          dotnet restore
          dotnet build -c Release --no-restore

      - name: Restore & Build TaskManagerAPI
        working-directory: task-manager/backend/TaskManagerAPI
        run: |
          dotnet restore
          dotnet build -c Release --no-restore

      - name: Install PM Frontend deps
        working-directory: project-manager/project-manager-frontend
        run: npm ci

      - name: PM Frontend typecheck/build
        working-directory: project-manager/project-manager-frontend
        env:
          REACT_APP_API_URL: http://localhost:5067
        run: |
          npm run build --if-present

      - name: Install TM Frontend deps
        working-directory: task-manager/task-manager-frontend
        run: npm ci

      - name: TM Frontend typecheck/build
        working-directory: task-manager/task-manager-frontend
        run: |
          npm run build --if-present

      - name: Start PM API (background)
        working-directory: project-manager/backend/ProjectManagerAPI
        env:
          ASPNETCORE_ENVIRONMENT: Development
          Jwt__Secret: dev-secret-change-me
        run: |
          Start-Process -FilePath dotnet -ArgumentList 'run --no-build' -PassThru | Out-String
          Start-Sleep -Seconds 8

      - name: Smoke test PM API /health
        shell: pwsh
        run: |
          $resp = Invoke-WebRequest -Uri 'http://localhost:5067/health' -UseBasicParsing -ErrorAction Stop
          if ($resp.StatusCode -ne 200) { throw "Health check failed: $($resp.StatusCode)" }

      - name: Stop dotnet processes
        if: always()
        shell: pwsh
        run: |
          Get-Process dotnet -ErrorAction SilentlyContinue | Stop-Process -Force
